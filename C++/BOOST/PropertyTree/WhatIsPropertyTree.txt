The Property Tree library provides a data structure that stores an arbitrarily deeply nested tree of values, indexed at each level by some key. Each node of the tree stores its own value, plus an ordered list of its subnodes and their keys. The tree allows easy access to any of its nodes by means of a path, which is a concatenation of multiple keys.
属性树库提供了一种数据结构，它存储任意深度嵌套的值树，在每个级别上按照某个键建立索引。树中的每个节点都存储自己的值，以及子节点及其键的序列表。树允许通过路径方便地访问它的任意节点，路径是多个键的连接。

In addition, the library provides parsers and generators for a number of data formats that can be represented by such a tree, including XML, INI, and JSON.
此外，该库还未许多数据格式提供解析器和生成器，这些数据格式可以由这种树表示，包括XML、INI、JSON。

Property trees are versatile data structures, but are particularly suited for holding configuration data. The tree provides its own, tree-specific interface, and each node is also an STL-compatible Sequence for its child nodes.
属性树是通用的数据结构，但特别适合保存配置数据。树提供了它自己的、特定于树的接口，每个节点对于它的子节点也是一个与STL兼容的序列。

Conceptually, then, a node can be thought of as the following structure:
因此，从概念上讲，节点可以认为是一下结构：
{
	struct ptree
	{
		data_type data;							/* 节点数据 */
		list<pair<key_type,ptree>> children;	/* 子节点及其键的序列表 */
	}
}

Both key_type and data_type are configurable to some extent, but will usually be std::string or std::wstring, and the parsers only work with this kind of tree.
key_type和data_type在一定程度上都是可配置的，但通常都是std::string或是std::wstring，解析器只用于该树。