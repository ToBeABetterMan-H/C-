1.概念
{
	1.共享内存是在两个正在运行的进程之间传递数据的一种非常有效的方式。
	2.系统通过映射同一段物理内存到程序的虚拟内存，从而实现共享内存。
	3.共享内存本身不具备同步机制。
}

2.shmget
{
	1.创建共享内存（选取物理内存）。
		int shmget(key_t key,size_t size,int shmflg);
		
	2.返回值：共享内存标识符，用于后续的共享内存函数；创建失败返回-1。
	3.参数1：key,用于为共享内存段命名。
	4.参数2：size,以字节为单位指定共享内存的大小。
	5.参数3：shmflg,权限标识(IPC_CREAT|0640)。
}

3.shmat
{
	1.连接共享内存到进程的地址空间。
		void* shmat(int shm_id,const void *shm_addr,int shmflg);
		
	2.返回值：返回一个指向共享内存第一个字节的指针；失败返回-1。
	3.参数1；shm_id,shmget的返回值。
	4.参数2：shm_addr,指定共享内存连接到当前进程中的地址位置，通常为NULL，表示让系统来选择共享内存出现的地址。
	5.参数3：shmflg,它的两个可能取值是SHM_RND（这个标志与shm_addr联合使用，用来控制共享内存连接的地址）和SHM_RDONLY（它使得连接的内存只读），通常为0。
	6.共享内存的读写权限由它的属主（创建者）、它的访问权限和当前进程的属主决定。共享内存的访问权限类似于文件的访问权限。
}

4.shmdt
{
	1.将共享内存从当前进程中分离。
		int shmdt(const void *shm_addr);
		
	2.返回值：成功返回0，失败返回-1。
	3.参数：shm_addr,shmat的返回值。
	4.将共享内存分离，只是意味着当前进程不使用该共享内存了。	
}

5.shmctl
{
	1.共享内存控制函数。
		int shmctl(int shm_id,int command,struct shmid_ds *buf);
		
	2.返回值：成功返回0，失败返回-1。
	3.参数1：shm_id,shmget的返回值。
	4.参数2：command,要采取的动作
	{
		1.IPC_STAT：把shmid_ds结构中的数据设置为共享内存的当前关联值。
		2.IPC_SET：如果进程有足够的权限，就把共享内存的当前管理值设置为shmid_ds结构中给出的值。
		3.IPC_RMID：删除共享内存段。
	}
	5.参数3：buf,指向包含共享内存模式和访问权限的结构
	{
		struct shmid_ds{
			uid_t shm_perm.uid;
			uid_t shm_perm.gid;
			mode_t shm_perm.mode;
		}
	}
}